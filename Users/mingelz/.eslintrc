/**
 * ref.:
 *   + http://eslint.org/docs/rules/
 *   + https://pirosikick.github.io/eslintrc-editor/
 */
{
  "root": true,
  "env": {
    "browser": true,
    "node": true
  },
  "globals": {},
  "ecmaFeatures": {},
  "parser": null,
  "rules": {
    // Possible Errors
    "comma-dangle": [2, "never"],                 // 对象最后一个 value 后不允许有空格
    "no-cond-assign": [2, "always"],              // http://eslint.org/docs/rules/no-cond-assign
    "no-console": 1,                              // 不允许有 console
    "no-constant-condition": 2,                   // http://eslint.org/docs/rules/no-constant-condition
    "no-control-regex": 2,                        // 正则中有允许有控制字符
    "no-debugger": 2,                             // 不允许有 debugger
    "no-dupe-args": 2,                            // http://eslint.org/docs/rules/no-dupe-args
    "no-dupe-keys": 2,                            // http://eslint.org/docs/rules/no-dupe-keys
    "no-duplicate-case": 2,                       // http://eslint.org/docs/rules/no-duplicate-case
    "no-empty-character-class": 2,                // http://eslint.org/docs/rules/no-empty-character-class
    "no-empty": 2,                                // http://eslint.org/docs/rules/no-empty
    "no-ex-assign": 2,                            // http://eslint.org/docs/rules/no-ex-assign
    "no-extra-boolean-cast": 2,                   // http://eslint.org/docs/rules/no-extra-boolean-cast
    "no-extra-parens": [2, "functions"],          // http://eslint.org/docs/rules/no-extra-parens
    "no-extra-semi": 2,                           // http://eslint.org/docs/rules/no-extra-semi
    "no-func-assign": 2,                          // http://eslint.org/docs/rules/no-func-assign
    "no-inner-declarations": [2, "both"],         // http://eslint.org/docs/rules/no-inner-declarations
    "no-invalid-regexp": 2,                       // http://eslint.org/docs/rules/no-invalid-regexp
    "no-irregular-whitespace": 2,                 // http://eslint.org/docs/rules/no-irregular-whitespace
    "no-negated-in-lhs": 2,                       // http://eslint.org/docs/rules/no-negated-in-lhs
    "no-obj-calls": 2,                            // http://eslint.org/docs/rules/no-obj-calls
    "no-regex-spaces": 2,                         // http://eslint.org/docs/rules/no-regex-spaces
    "no-sparse-arrays": 2,                        // http://eslint.org/docs/rules/no-sparse-arrays
    "no-unexpected-multiline": 2,                 // http://eslint.org/docs/rules/no-unexpected-multiline
    "no-unreachable": 2,                          // http://eslint.org/docs/rules/no-unreachable
    "use-isnan": 2,                               // http://eslint.org/docs/rules/use-isnan
    "valid-jsdoc": 1,                             // http://eslint.org/docs/rules/valid-jsdoc
    "valid-typeof": 2,                            // http://eslint.org/docs/rules/valid-typeof

    // Best Practices
    "accessor-pairs": 2,                          // http://eslint.org/docs/rules/accessor-pairs
    "block-scoped-var": 2,                        // http://eslint.org/docs/rules/block-scoped-var
    "complexity": 2,                              // http://eslint.org/docs/rules/complexity
    "consistent-return": 2,                       // http://eslint.org/docs/rules/consistent-return
    "curly": [2, "multi-line"],                   // http://eslint.org/docs/rules/curly
    "default-case": 2,                            // http://eslint.org/docs/rules/default-case
    "dot-location": [2, "object"],                // http://eslint.org/docs/rules/dot-location
    "dot-notation": [2, {                         // http://eslint.org/docs/rules/dot-notation
      "allowKeywords": true
    }],
    "eqeqeq": [2, "smart"],                       // http://eslint.org/docs/rules/eqeqeq
    "guard-for-in": 2,                            // http://eslint.org/docs/rules/guard-for-in
    "no-alert": 2,                                // http://eslint.org/docs/rules/no-alert
    "no-caller": 2,                               // http://eslint.org/docs/rules/no-caller
    "no-case-declarations": 2,                    // http://eslint.org/docs/rules/no-case-declarations
    "no-div-regex": 2,                            // http://eslint.org/docs/rules/no-div-regex
    "no-else-return": 2,                          // http://eslint.org/docs/rules/no-else-return
    "no-empty-label": 2,                          // http://eslint.org/docs/rules/no-empty-label
    "no-empty-pattern": 2,                        // http://eslint.org/docs/rules/no-empty-pattern
    "no-eq-null": 2,                              // http://eslint.org/docs/rules/no-eq-null
    "no-eval": 2,                                 // http://eslint.org/docs/rules/no-eval
    "no-extend-native": 2,                        // http://eslint.org/docs/rules/no-extend-native
    "no-extra-bind": 2,                           // http://eslint.org/docs/rules/no-extra-bind
    "no-fallthrough": 2,                          // http://eslint.org/docs/rules/no-fallthrough
    "no-floating-decimal": 2,                     // http://eslint.org/docs/rules/no-floating-decimal
    "no-implicit-coercion": [2, {                 // http://eslint.org/docs/rules/no-implicit-coercion
      "boolean": false,
      "number": true,
      "string": true
    }],
    "no-implied-eval": 2,
    "no-invalid-this": 2,                         // 不允许有不清楚上下文的 this
    "no-iterator": 2,
    "no-labels": 1,                               // 不允许使用 label
    "no-lone-blocks": 2,                          // 不允许有无意义的 {} 对
    "no-loop-func": 2,                            // 不允许在循环中定义函数
    "no-magic-numbers": 2,                        // 不允许直接使用常量数字
    "no-multi-spaces": 2,                         // 不允许在代码中有连续空格
    "no-multi-str": 2,                            // 不允许使用 \ 转义多行字符串每行结尾
    "no-native-reassign": 2,                      // 不允许重定义内建对象（包括 ES5/ES6/Browser/Node 等环境, https://github.com/sindresorhus/globals/）
    "no-new-func": 2,                             // 不允许使用 Function 构造函数
    "no-new-wrappers": 2,                         // 不允许使用原始对象构造实例 eg: var str = new String('Hello world'); typeof str === 'object'
    "no-new": 2,                                  // new 出的实例一定要赋值给变量
    "no-octal-escape": 2,                         // 不对8进制数字做转义，而不是使用 Unicode 方式
    "no-octal": 2,                                // 不使用以0开头的8进制字面量
    "no-param-reassign": [2, {                    // 不允许修改函数参数
      "props": false                              // 参数的属性是否可被修改
    }],
    "no-process-env": 0,                          // 不在 Node 下使用 process.env 获取环境变量
    "no-proto": 2,                                // 不允许使用 __proto__ 属性
    "no-redeclare": 2,                            // 不允许对变量重复定义
    "no-return-assign": [2, "except-parens"],     // 不允许 return 后跟表达式，除非表达式用括号括起来
    "no-script-url": 2,                           // 不允许使用 javascript:// 式的URL
    "no-self-compare": 2,                         // 不允许对比自身，eg: if (x === x)
    "no-sequences": 2,                            // 不允许使用逗号连接多个表达式
    "no-throw-literal": 2,                        // 不允许 throw 后跟字面量，需要 new Error
    "no-unused-expressions": [2, {                // 不允许定义未使用的表达式
      "allowShortCircuit": true,                  // 可以使用 a && b() 形式的短表达式
      "allowTernary": true                        // 允许三元表达式
    }],
    "no-useless-call": 2,                         // 不允许不必要的 .call() 和 .apply()
    "no-useless-concat": 2,                       // 不允许多个常量字符串拼接，但换行拼接不受影响
    "no-void": 2,                                 // 不允许使用 void
    "no-warning-comments": [1, {                  // 不允许出现 TODO, FIXME 等关键字（保证最终产出的是去掉未完成工作的代码）
      "terms": ["todo", "fixme", "xxx"],          // 不允许出现的关键字
    }],
    "no-with": 2,                                 // 不允许使用 with
    "radix": 2,                                   // 必须传入 parseInt 的第2个参数
    "vars-on-top": 0,                             // 所有变量必须放在作用域顶部
    "wrap-iife": [2, "any"],                      // 自执行函数括号放在哪里
    "yoda": [2, "always", {                       // 比较表达式是否需要符合自然语义，当使用 always 时就不需要下边两个细节了
        "exceptRange": true,                      // 大小于对比要符合区间性
        "onlyEquality": true                      // 等于对比变量在左
    }],

    // Strict Mode
    "strict": [2, "function"],                    // 是否要标记 use strict，以及标记的位置

    // Variables
    "init-declarations": [2, "always"],           // 定义变量的时候需要赋初始值
    "no-catch-shadow": 2,                         // 在IE8中catch参数名会扩散到外部作用域
    "no-delete-var": 2,                           // 不允许使用 delete 删除使用 var 定义的变量
    "no-label-var": 2,                            // 不允许 label 的名字与变量名相同
    "no-shadow-restricted-names": 2,              // 不允许定义的方法名与已有方法相同
    "no-shadow": [2, {                            // 不允许在子作用域中定义与外部作用域同名的变量
      "builtinGlobals": false,                    // 是否可定义与内置方法/属性同名变量
      "hoist": "functions",                       // 当子作用域在前时，是否可被后边的定义覆盖
      "allow": []                                 // 当前范围的关键字被排除
    }],
    "no-undef-init": 2,                           // 不允许定义一个变量的初始值为 undefined
    "no-undef": [2, {                             // 不允许使用未定义变量
      "typeof": false                             // 是否针对 typeof 后跟的变量做检测
    }],
    "no-undefined": 2,                            // 是否可以使用 undefined
    "no-unused-vars": [2, {                       // 检测是否有未被使用的变量和函数
      "vars": "all",                              // 检测所有的变量的使用情况，还是仅检测局部作用域下的变量
      "args": "after-used",                       // 函数参数在未使用前也被认为是未使用变量
      "varsIgnorePattern": "^_",                  // 可被忽略的未使用变量匹配正则
      "argsIgnorePattern": "^_"                   // 可被忽略的未使用参数匹配正则
    }],
    "no-use-before-define": 2,                    // 变量与函数需要先定义再使用

    // Node.js and CommonJS
    "callback-return": 2,
    "global-require": 2,
    "handle-callback-err": 2,
    "no-mixed-requires": 2,
    "no-new-require": 2,
    "no-path-concat": 2,
    "no-process-exit": 2,
    "no-restricted-modules": 2,
    "no-sync": 2,

    // Stylistic Issues
    "array-bracket-spacing": [2, "never"],        // 数组的中括号前后是否要加空格
    "block-spacing": [2, "always"],               // 代码块前后是否要有空格
    "brace-style": [2, "stroustrup", {                  // http://eslint.org/docs/rules/brace-style
      "allowSingleLine": true
    }],
    "camelcase": [2, {                            // http://eslint.org/docs/rules/camelcase
      "properties": "never"
    }],
    "comma-spacing": [2, {                        // http://eslint.org/docs/rules/comma-spacing
      "before": false,
      "after": true
    }],
    "comma-style": [2, "last"],                   // http://eslint.org/docs/rules/comma-style
    "computed-property-spacing": 2,
    "consistent-this": 2,
    "eol-last": 2,                                // http://eslint.org/docs/rules/eol-last
    "func-names": 0,                              // http://eslint.org/docs/rules/func-names
    "func-style": 0,                              // http://eslint.org/docs/rules/func-names
    "id-length": 0,                               // http://eslint.org/docs/rules/func-names
    "id-match": 0,                                // http://eslint.org/docs/rules/func-names
    "indent": [2, 2, {                            // http://eslint.org/docs/rules/
      "SwitchCase": 1
    }],
    "jsx-quotes": 2,
    "key-spacing": [2, {                          // 在对象的冒号前后是否要有空格
      "mode": "strict",                           // 仅允许一个空格
      "beforeColon": false,                       // 在冒号前是否要空格
      "afterColon": true                          // 在冒号后是否要空格
    }],
    "linebreak-style": [2, "unix"],               // 回车符号使用哪个版本 CR/LF
    "lines-around-comment": [2, {                 // 定义注释前后的细节
      "beforeBlockComment": true,                 // 在块注释前是否空一行
      "afterBlockComment": false,                 // 在块注释后是否空一行
      "beforeLineComment": false,                 // 在行注释前是否空一行
      "afterLineComment": false,                  // 在行注释后是否空一行
      "allowBlockStart": true,                    // 在 Block 第一行时，需要检查注释前是否有空行
      "allowBlockEnd": true,                      // 在 Block 最后一行时，是否检查注释后是否有空行
      "allowObjectStart": true,                   // 在 Object 第一行时，需要检查注释前是否有空行
      "allowObjectEnd": true,                     // 在 Object 最后一行时，是否检查注释后是否有空行
      "allowArrayStart": true,                    // 在 Array 第一行时，需要检查注释前是否有空行
      "allowArrayEnd": true                       // 在 Array 最后一行时，是否检查注释后是否有空行
    }],
    "max-nested-callbacks": [2, 3],               // 最多嵌套多少层 callback
    "new-cap": [2, {                              // 检查 new 操作符后的命名是否为大写字母开头
      "newIsCap": true,                           // 检查所有首字母开头的函数都仅用 new 调用
      "capIsNew": true                            // 检查所有 new 后跟的函数都是首字母大写的
      //"newIsCapExceptions": [""]                  // 对应的 newIsCap 例外
      //"capIsNewExceptions": [""]                  // 对应的 capIsNew 例外，默认: Array, Boolean, Date, Error, Function, Number, Object, RegExp, String, Symbol
    }],
    "new-parens": 2,                              // 使用 new 操作符时，构造函数要带括号
    "newline-after-var": [2, "always"],           // var 定义后留一个空行（最佳实践希望把定义变量与运行代码用一个空行分开）
    "no-array-constructor": 2,                    // 不允许使用 Array 构造函数（允许通过数字构造某长度的数组，但不允许传入数组值的方式）
    "no-continue": 2,                             // 不允许使用 continue
    "no-inline-comments": 2,                      // 不允许在代码行最后加注释
    "no-lonely-if": 2,                            // 不允许在 else 中仅有独立的 if，可改用 else if 语句
    "no-mixed-spaces-and-tabs": 2,                // 不允许在缩进中 <space> 和 <tab> 混用
    "no-multiple-empty-lines": [2, {              // 不允许连续多个空行
      "max": 2
    }],
    "no-negated-condition": 2,                    // 不允许在 if/else 里先用否定式
    "no-nested-ternary": 2,                       // 不允许嵌套三元运算符
    "no-new-object": 2,                           // 不允许使用构造函数声明对象，直接用字面量
    "no-restricted-syntax": [2,                   // 不允许某些特殊语法
      "FunctionExpression",                       // 不允许使用表达式赋值函数 var fn = function () {}
      "WithStatement",                            // 不允许使用 With
    ],
    "no-spaced-func": 2,                          // 不允许函数调用时函数名与括号中间有空格
    "no-ternary": 0,                              // 不允许使用三元运算符
    "no-trailing-spaces": [2, {                   // 行尾不允许有空格
      "skipBlankLines": false                     // 跳过空行
    }],
    "no-underscore-dangle": [0, {                 // 不允许变量头尾使用下划线
      "allow": []                                 // 例外列表
    }],
    "no-unneeded-ternary": [2, {                  // 不允许使用不必要的三元表达式，如 a = a ? a : 1
      "defaultAssignment": false                  // 默认表达式是否可以使用此方式
    }],
    "object-curly-spacing": [2, "never", {        // 当整个对象在一行时，大括号前后是否要加空格
      "objectsInObjects": false,                  // 针对嵌套对象的检测
      "arraysInObjects": false                    // 针对嵌套数组的检测
    }],
    "one-var": [2, {                              // 一个函数中只有一个 var / const / let
      "uninitialized": "always",                  // 用于非初始化的变量，放在一个 var 里
      "initialized": "never"                      // 用于初始化的变量，每个变量一个 var
    }],
    "operator-assignment": [2, "always"],         // 缩短操作符，对于 += 等情况，推荐用 x += y 还是 x = x + y
    "operator-linebreak": [2, "after", {          // 操作符前后有换行时，操作符应该在前一行首，还是下一行尾
      "overrides": {                              // 需要特殊处理的 case
        "?": "after",
        "+=": "none"
      }
    }],
    "padded-blocks": [2, "never"],                // 在语句块前后是否需要一个空行分隔
    "quote-props": [2, "as-needed", {             // 对象的属性是否需要括号
      "keywords": true,                           // 当 as-needed 时，对于 JS 关键词是否需要括号
      "numbers": true
    }],
    "quotes": [2, "single", "avoid-escape"],      // 字符串使用单引号还是双引号
    "require-jsdoc": 1,                           // 函数是否有符合 JSDoc 格式的注释
    "semi-spacing": [2, {                         // 分号前后是否要加空格
      "before": false,
      "after": true
    }],
    "semi": [2, "always"],                        // 语句后是否要加分号
    "sort-vars": [0, {                            // 变量定义是否按 ASCII 排序
      "ignoreCase": true
    }],
    "space-after-keywords": [2, "always"],        // 关键词后是否要有空格，包括：if, else, for, while, do, switch, try, catch, finally, with.
    "space-before-blocks": [2, {                  // 在大括号开始前是否要加空格
      "functions": "always",                      // 针对函数体大括号前
      "keywords": "always"                        // 针对关键字后的大括号前
    }],
    "space-before-function-paren": [2, {          // 函数后的调用括号前是否要加空格
      "anonymous": "always",                      // 针对匿名函数
      "named": "always"                           // 针对具名函数
    }],
    "space-before-keywords": [2, "always"],       // 关键词前是否要有空格，包括：if, else, for, while, do, switch, throw, try, catch, finally, with, break, continue, return, function, yield, class, var, let, const
    "space-in-parens": [2, "never", {             // 小括号内部是否要加空格
      "exceptions": []                            // 可用于排除检查的 case
    }],
    "space-infix-ops": [2, {                      // 在中缀操作符前后是否要有空格，如 +, -, *, /, >, <, =, ?:
      "int32Hint": true                           // 是否允许 var foo = bar|0
    }],
    "space-return-throw-case": 2,                 // 在 return, throw, case 后是否要加空格
    "space-unary-ops": [2, {                      // 一元操作符前后是否允许加空格
      "words": true,                              // 像 new, delete, typeof, void, yield 后需要加空格
      "nonwords": false                           // 非单词类的一元操作符不能加空格，如 -, +, --, ++, !, !!
    }],
    "spaced-comment": [1, "always", {             // 注释最开始是否需要留空格
      "line": {                                   // 针对单行注释
        "markers": ["/"],                         // markers 表示有此 mark 则排除检查，markers 只能出现在最开始
        "exceptions": ["-", "+"]                  // 注释中有以下字符出现，则排除检查
      },
      "block": {                                  // 针对多行注释
        "markers": ["!"],
        "exceptions": ["*"]
      }
    }],
    "wrap-regex": 2,                              // 是否要包裹正则字面量 /reg/.test() => (/reg/).test()

    // ECMAScript 6
    "arrow-body-style": 2,
    "arrow-parens": 2,
    "arrow-spacing": 2,
    "constructor-super": 2,
    "generator-star-spacing": 2,
    "no-arrow-condition": 2,
    "no-class-assign": 2,
    "no-const-assign": 2,
    "no-dupe-class-members": 2,
    "no-this-before-super": 2,
    "no-var": 2,
    "object-shorthand": 2,
    "prefer-arrow-callback": 2,
    "prefer-const": 2,
    "prefer-reflect": 2,
    "prefer-spread": 2,
    "prefer-template": 2,
    "require-yield": 2,

    // Legacy
    "max-depth": [2, 4],                          // 每个函数中最大可嵌套的层数
    "max-len": [2, 80, 4, {                       // 每行的最大长度（80个字符，一个tab算4个字符）
      "ignoreComments": true,                     // 是否检查计算注释
      "ignoreUrls": true,                         // 是否忽略 URL
      "ignorePattern": ""                         // 要忽略的匹配
    }],
    "max-params": [2, 9],                         // 一个函数最多可以有多少个参数
    "max-statements": [2, 9],                     // 一个函数中最多可以有多少条声明
    "no-bitwise": 2,                              // 不允许使用位运算操作符
    "no-plusplus": [2, {                          // 不允许使用 ++/-- 操作符，用 +=/-= 代替
      "allowForLoopAfterthoughts": true           // 但允许在 for 循环的表达式中使用
    }]
  },
  "extends": "eslint:recommended"
}
